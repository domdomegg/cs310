{"version":3,"sources":["../../language/dist/index.js","../../algorithm-w/dist/index.js","../../algorithm-w-prime/dist/index.js","../../algorithm-m/dist/index.js","config.ts","analytics.ts","ASTView.tsx","ResultView.tsx","Main.tsx","index.tsx"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__","constructor","create","__spreadArrays","s","i","il","arguments","length","r","k","a","j","jl","defineProperty","exports","value","generalise","freeVars","diff","unique","unify","combine","apply","inst","contains","parse","typeUtils","TypeInferenceError","ParseError","PolyType","TypeFuncApp","TypeVar","Let","Abs","App","Var","NumberLiteral","CharLiteral","masala_parser_1","require","pos","notes","toString","name","fun","arg","func","param","body","def","constructorName","args","_i","startsWith","join","every","map","quantifiedVars","monoType","v","_super","message","expr","_this","Error","number","char","boolean","f","one","two","extra","slice","list","tuple","monoTypes","bind","repeat","maybe","either","left","right","c","pt","mt","standardCtx","type","other","some","includes","substitution","context","mappedContext","key","substitutions","newSubstitution","xs","vs","Set","forEach","x","push","bset","filter","has","reduce","acc","cur","values","freshTypeName","from","to","indexOf","type1","type2","_a","sub","ctx","genlex","GenLex","identifier","tokenize","C","charIn","rep","t","letTok","string","inTok","charLiteral","stringLiteral","numberLiteral","N","integer","lbracket","rbracket","backslash","arrow","lparen","rparen","equal","comma","expression","F","try","LIT_NUM","or","LIT_CHAR","LIT_STRING","TUPLE","LIST","VAR","ABS","LET","PAR","array","nestLeft","getPos","toCharList","location","then","lazy","drop","end","toTuple","optrep","opt","toList","at","start","single","expandPos","prev","chars","split","charPos","first","last","elements","orElse","result","offset","getOffset","input","guessedEnd","rawString","source","trimEnd","lastIndexOf","parser","use","eos","code","forResponse","specialCase","endsWith","accepted","issuePosition","specialCases","response","Streams","ofString","isAccepted","__assign","assign","n","infer","language_1","typeCounter","_infer","steps","ast","cloneAst","e","get","highlight","Map","set","logger","_b","except","err","instantiatedType","_c","funcType","funcSubstitution","_d","argType","argSubstitution","firstPartOfLogMessage","unifiedSubstitution","exprType","keys","replace","_e","bodyType","bodySubstitution","_f","defType","defSubstitution","generalisedDefType","_g","unifySubtitutions","s0","s1","dn","t0","entries","t1","alpha","tau","tauPrime","beta","tau0","tau1","str","firstPartOfLogMessage1","unifiedSubsitution","funcType2","argType2","firstPartOfLogMessage2","unifyingSubstitution","rootType","varType","combinedSubstitution","beta1","beta2","functionType","s2","config","analytics","enabled","url","useAnalytics","navigator","doNotTrack","streamId","Math","random","data","fetch","method","headers","JSON","stringify","project","fn","delayInMiliseconds","timeout","clearTimeout","setTimeout","undefined","debounce","NodeView","node","hoverCallback","NodeWrapperView","className","NodeChildView","symbol","children","onMouseOver","onMouseOut","data-symbol","ASTView","algorithms","inferW","inferM","inferWPrime","createHoverCallback","setHighlights","otherHighlights","active","ResultView","algorithm","parseResult","useEffect","inferenceResult","step","document","getElementById","style","overflow","SetButton","setter","current","onClick","Main","useState","setCode","setAlgorithm","highlights","showingHelp","setShowingHelp","hideHelp","resultview","useMemo","id","target","data-testid","placeholder","onChange","h","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7c73af16.chunk.js","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generalise = exports.freeVars = exports.diff = exports.unique = exports.unify = exports.combine = exports.apply = exports.inst = exports.contains = exports.parse = exports.typeUtils = exports.TypeInferenceError = exports.ParseError = exports.PolyType = exports.TypeFuncApp = exports.TypeVar = exports.Let = exports.Abs = exports.App = exports.Var = exports.NumberLiteral = exports.CharLiteral = void 0;\nvar masala_parser_1 = require(\"@domdomegg/masala-parser\");\nvar CharLiteral = /** @class */ (function () {\n    function CharLiteral(value, pos, notes) {\n        this.value = value;\n        this.pos = pos;\n        this.notes = notes;\n    }\n    CharLiteral.prototype.toString = function () {\n        return \"'\" + this.value + \"'\";\n    };\n    return CharLiteral;\n}());\nexports.CharLiteral = CharLiteral;\nvar NumberLiteral = /** @class */ (function () {\n    function NumberLiteral(value, pos, notes) {\n        this.value = value;\n        this.pos = pos;\n        this.notes = notes;\n    }\n    NumberLiteral.prototype.toString = function () {\n        return this.value.toString();\n    };\n    return NumberLiteral;\n}());\nexports.NumberLiteral = NumberLiteral;\nvar Var = /** @class */ (function () {\n    function Var(name, pos, notes) {\n        this.name = name;\n        this.pos = pos;\n        this.notes = notes;\n    }\n    Var.prototype.toString = function () {\n        return this.name;\n    };\n    return Var;\n}());\nexports.Var = Var;\nvar App = /** @class */ (function () {\n    function App(fun, arg, pos, notes) {\n        this.func = fun;\n        this.arg = arg;\n        this.pos = pos;\n        this.notes = notes;\n    }\n    App.prototype.toString = function () {\n        return '(' + this.func.toString() + ' ' + this.arg.toString() + ')';\n    };\n    return App;\n}());\nexports.App = App;\nvar Abs = /** @class */ (function () {\n    function Abs(param, body, pos, notes) {\n        this.param = param;\n        this.body = body;\n        this.pos = pos;\n        this.notes = notes;\n    }\n    Abs.prototype.toString = function () {\n        return '(\\\\' + this.param + ' -> ' + this.body.toString() + ')';\n    };\n    return Abs;\n}());\nexports.Abs = Abs;\nvar Let = /** @class */ (function () {\n    function Let(param, def, body, pos, notes) {\n        this.param = param;\n        this.def = def;\n        this.body = body;\n        this.pos = pos;\n        this.notes = notes;\n    }\n    Let.prototype.toString = function () {\n        return '(let ' + this.param + ' = ' + this.def.toString() + ' in ' + this.body.toString() + ')';\n    };\n    return Let;\n}());\nexports.Let = Let;\nvar TypeVar = /** @class */ (function () {\n    function TypeVar(name) {\n        this.name = name;\n    }\n    TypeVar.prototype.toString = function () {\n        return this.name;\n    };\n    return TypeVar;\n}());\nexports.TypeVar = TypeVar;\nvar TypeFuncApp = /** @class */ (function () {\n    function TypeFuncApp(constructorName) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this.constructorName = constructorName;\n        this.args = args;\n    }\n    TypeFuncApp.prototype.toString = function () {\n        if (this.constructorName == '->') {\n            var firstArgIsFunction = this.args[0] instanceof TypeFuncApp && this.args[0].constructorName == '->';\n            return (firstArgIsFunction ? '(' + this.args[0].toString() + ')' : this.args[0].toString()) + ' -> ' + this.args[1].toString();\n        }\n        if (this.constructorName == '[]') {\n            return '[' + this.args[0].toString() + ']';\n        }\n        if (this.constructorName.startsWith(',')) {\n            return '(' + this.args.join(', ') + ')';\n        }\n        if (this.args.every(function (arg) { return arg instanceof TypeVar || arg.constructorName == 'Int' || arg.constructorName == 'Char' || arg.constructorName == 'Bool'; })) {\n            return this.constructorName + (this.args.length ? ' ' : '') + this.args.map(function (a) { return '' + a.toString() + ''; }).join(' ');\n        }\n        return this.constructorName + (this.args.length ? ' ' : '') + this.args.map(function (a) { return '(' + a.toString() + ')'; }).join(' ');\n    };\n    return TypeFuncApp;\n}());\nexports.TypeFuncApp = TypeFuncApp;\nvar PolyType = /** @class */ (function () {\n    function PolyType(quantifiedVars, monoType) {\n        this.quantifiedVars = quantifiedVars;\n        this.monoType = monoType;\n    }\n    PolyType.prototype.toString = function () {\n        return (this.quantifiedVars.length ? (this.quantifiedVars.map(function (v) { return '∀' + v; }).join('') + ': ') : '') + this.monoType.toString();\n    };\n    return PolyType;\n}());\nexports.PolyType = PolyType;\nvar TypeInferenceError = /** @class */ (function (_super) {\n    __extends(TypeInferenceError, _super);\n    function TypeInferenceError(message, expr) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \"TypeInferenceError\";\n        _this.expr = expr;\n        return _this;\n    }\n    return TypeInferenceError;\n}(Error));\nexports.TypeInferenceError = TypeInferenceError;\n/* Type utilities */\n// Utilities which make creating types easier\nvar number = new TypeFuncApp('Int');\nvar char = new TypeFuncApp('Char');\nvar boolean = new TypeFuncApp('Bool');\nvar f = function (one, two) {\n    var extra = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        extra[_i - 2] = arguments[_i];\n    }\n    if (extra.length === 0)\n        return new TypeFuncApp('->', one, two);\n    return new TypeFuncApp('->', one, f.apply(void 0, __spreadArrays([two, extra[0]], extra.slice(1))));\n};\nvar list = function (monoType) { return new TypeFuncApp('[]', monoType); };\nvar tuple = function () {\n    var monoTypes = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        monoTypes[_i] = arguments[_i];\n    }\n    if (monoTypes.length <= 1)\n        throw new Error('Tuple has too few elements, minimum of 2 but given ' + monoTypes.length);\n    if (monoTypes.length > 9)\n        throw new Error('Tuple has too many elements, maximum of 9 but given ' + monoTypes.length);\n    return new (TypeFuncApp.bind.apply(TypeFuncApp, __spreadArrays([void 0, ','.repeat(monoTypes.length - 1)], monoTypes)))();\n};\nvar maybe = function (monoType) { return new TypeFuncApp('Maybe', monoType); };\nvar either = function (left, right) { return new TypeFuncApp('Either', left, right); };\nvar a = new TypeVar('a');\nvar b = new TypeVar('b');\nvar c = new TypeVar('c');\nvar d = new TypeVar('d');\nvar pt = function (mt) { return new PolyType([], mt); };\n// Set up some basic things so the langauge is interesting\nvar standardCtx = {\n    // Arithmetic\n    '+': pt(f(number, number, number)),\n    '*': pt(f(number, number, number)),\n    '-': pt(f(number, number, number)),\n    '/': pt(f(number, number, number)),\n    '%': pt(f(number, number, number)),\n    'negate': pt(f(number, number)),\n    'abs': pt(f(number, number)),\n    'signum': pt(f(number, number)),\n    'even': pt(f(number, boolean)),\n    'odd': pt(f(number, boolean)),\n    // Booleans\n    'not': pt(f(boolean, boolean)),\n    '&&': pt(f(boolean, boolean, boolean)),\n    '||': pt(f(boolean, boolean, boolean)),\n    'True': pt(boolean),\n    'False': pt(boolean),\n    // Example variables\n    'myNumber': pt(number),\n    'myBoolean': pt(boolean),\n    // Lists\n    '[]': new PolyType(['a'], list(a)),\n    ':': new PolyType(['a'], f(a, list(a), list(a))),\n    'cons': new PolyType(['a'], f(a, list(a), list(a))),\n    '++': new PolyType(['a'], f(list(a), list(a), list(a))),\n    'head': new PolyType(['a'], f(list(a), a)),\n    'last': new PolyType(['a'], f(list(a), a)),\n    'tail': new PolyType(['a'], f(list(a), list(a))),\n    'init': new PolyType(['a'], f(list(a), list(a))),\n    'uncons': new PolyType(['a'], f(list(a), maybe(tuple(a, list(a))))),\n    'null': new PolyType(['a'], f(list(a), boolean)),\n    'length': new PolyType(['a'], f(list(a), number)),\n    'map': new PolyType(['a', 'b'], f(f(a, b), list(a), list(b))),\n    'reverse': new PolyType(['a'], f(list(a), list(a))),\n    'intersperse': new PolyType(['a'], f(a, list(a), list(a))),\n    'intercalate': new PolyType(['a'], f(list(a), list(list(a)), list(a))),\n    'transpose': new PolyType(['a'], f(list(list(a)), list(list((a))))),\n    'subsequences': new PolyType(['a'], f(list(a), list(list((a))))),\n    'permutations': new PolyType(['a'], f(list(a), list(list((a))))),\n    'foldl': new PolyType(['a'], f(f(b, a, b), b, list(a), b)),\n    'foldl\\'': new PolyType(['a'], f(f(b, a, b), b, list(a), b)),\n    'foldl1': new PolyType(['a'], f(f(a, a, a), list(a), a)),\n    'foldl1\\'': new PolyType(['a'], f(f(a, a, a), list(a), a)),\n    'foldr': new PolyType(['a'], f(f(a, b, b), b, list(a), b)),\n    'foldr1': new PolyType(['a'], f(f(a, a, a), list(a), a)),\n    'concat': new PolyType(['a'], f(list(list(a)), list(a))),\n    'concatMap': new PolyType(['a'], f(f(a, list(a)), list(a), list(b))),\n    'and': pt(f(list(boolean), boolean)),\n    'or': pt(f(list(boolean), boolean)),\n    'any': new PolyType(['a'], f(f(a, boolean), list(a), boolean)),\n    'all': new PolyType(['a'], f(f(a, boolean), list(a), boolean)),\n    'sum': pt(f(list(number), number)),\n    'product': pt(f(list(number), number)),\n    'maximum': pt(f(list(number), number)),\n    'minimum': pt(f(list(number), number)),\n    'take': new PolyType(['a'], f(number, list(a), list(a))),\n    'drop': new PolyType(['a'], f(number, list(a), list(a))),\n    'splitAt': new PolyType(['a'], f(number, list(a), tuple(list(a), list(a)))),\n    'takeWhile': new PolyType(['a'], f(f(a, boolean), list(a), list(a))),\n    'dropWhile': new PolyType(['a'], f(f(a, boolean), list(a), list(a))),\n    'elem': new PolyType(['a'], f(a, list(a), boolean)),\n    'notElem': new PolyType(['a'], f(a, list(a), boolean)),\n    'lookup': new PolyType(['a', 'b'], f(a, list(tuple(a, b)), maybe(b))),\n    'find': new PolyType(['a'], f(f(a, boolean), list(a), maybe(a))),\n    'filter': new PolyType(['a'], f(f(a, boolean), list(a), list(a))),\n    'partition': new PolyType(['a'], f(f(a, boolean), list(a), tuple(list(a), list(a)))),\n    '!!': new PolyType(['a'], f(list(a), number, a)),\n    'zip': new PolyType(['a', 'b'], f(list(a), list(b), list(tuple(a, b)))),\n    'zipWith': new PolyType(['a', 'b', 'c'], f(f(a, b, c), list(a), list(b), list(c))),\n    'unzip': new PolyType(['a', 'b'], f(list(tuple(a, b)), tuple(list(a), list(b)))),\n    'nub': new PolyType(['a'], f(list(a), list(a))),\n    'delete': new PolyType(['a'], f(a, list(a), list(a))),\n    'union': new PolyType(['a'], f(list(a), list(a), list(a))),\n    'intersect': new PolyType(['a'], f(list(a), list(a), list(a))),\n    'sort': new PolyType(['a'], f(list(a), list(a))),\n    // Tuples\n    ',': new PolyType(['a', 'b'], f(a, b, tuple(a, b))),\n    ',,': new PolyType(['a', 'b', 'c'], f(a, b, c, tuple(a, b, c))),\n    ',,,': new PolyType(['a', 'b', 'c', 'd'], f(a, b, c, d, tuple(a, b, c, d))),\n    ',,,,': new PolyType(['a', 'b', 'c', 'd', 'e'], f(a, b, c, d, new TypeVar('e'), tuple(a, b, c, d, new TypeVar('e')))),\n    ',,,,,': new PolyType(['a', 'b', 'c', 'd', 'e', 'f'], f(a, b, c, d, new TypeVar('e'), new TypeVar('f'), tuple(a, b, c, d, new TypeVar('e'), new TypeVar('f')))),\n    ',,,,,,': new PolyType(['a', 'b', 'c', 'd', 'e', 'f', 'g'], f(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g'), tuple(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g')))),\n    ',,,,,,,': new PolyType(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], f(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g'), new TypeVar('h'), tuple(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g'), new TypeVar('h')))),\n    ',,,,,,,,': new PolyType(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], f(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g'), new TypeVar('h'), new TypeVar('i'), tuple(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g'), new TypeVar('h'), new TypeVar('i')))),\n    't': new PolyType(['a', 'b'], f(a, b, tuple(a, b))),\n    'tt': new PolyType(['a', 'b', 'c'], f(a, b, c, tuple(a, b, c))),\n    'ttt': new PolyType(['a', 'b', 'c', 'd'], f(a, b, c, d, tuple(a, b, c, d))),\n    'tttt': new PolyType(['a', 'b', 'c', 'd', 'e'], f(a, b, c, d, new TypeVar('e'), tuple(a, b, c, d, new TypeVar('e')))),\n    'ttttt': new PolyType(['a', 'b', 'c', 'd', 'e', 'f'], f(a, b, c, d, new TypeVar('e'), new TypeVar('f'), tuple(a, b, c, d, new TypeVar('e'), new TypeVar('f')))),\n    'tttttt': new PolyType(['a', 'b', 'c', 'd', 'e', 'f', 'g'], f(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g'), tuple(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g')))),\n    'ttttttt': new PolyType(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], f(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g'), new TypeVar('h'), tuple(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g'), new TypeVar('h')))),\n    'tttttttt': new PolyType(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], f(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g'), new TypeVar('h'), new TypeVar('i'), tuple(a, b, c, d, new TypeVar('e'), new TypeVar('f'), new TypeVar('g'), new TypeVar('h'), new TypeVar('i')))),\n    'fst': new PolyType(['a', 'b'], f(tuple(a, b), a)),\n    'snd': new PolyType(['a', 'b'], f(tuple(a, b), b)),\n    'curry': new PolyType(['a', 'b', 'c'], f(f(tuple(a, b), c), a, b, c)),\n    'uncurry': new PolyType(['a', 'b', 'c'], f(f(a, b, c), tuple(a, b), c)),\n    // Maybe\n    'Just': new PolyType(['a'], f(a, maybe(a))),\n    'Nothing': new PolyType(['a'], maybe(a)),\n    // Either\n    'Left': new PolyType(['a', 'b'], f(a, either(a, b))),\n    'Right': new PolyType(['a', 'b'], f(b, either(a, b))),\n    // Id\n    'id': new PolyType(['a'], f(a, a)),\n};\n/** @returns whether a type contains a type variable */\nfunction contains(type, other) {\n    if (type instanceof TypeVar) {\n        return type.name == other.name;\n    }\n    if (type instanceof TypeFuncApp) {\n        return type.args.some(function (arg) { return contains(arg, other); });\n    }\n    if (type instanceof PolyType) {\n        return contains(type.monoType, other) && !type.quantifiedVars.includes(other.name);\n    }\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n}\nexports.contains = contains;\nfunction inst(type, freshTypeName, from, to) {\n    if (from === void 0) { from = []; }\n    if (to === void 0) { to = []; }\n    if (type instanceof TypeVar) {\n        var i = from.indexOf(type.name);\n        return (i === -1) ? type : new TypeVar(to[i]);\n    }\n    if (type instanceof TypeFuncApp) {\n        return new (TypeFuncApp.bind.apply(TypeFuncApp, __spreadArrays([void 0, type.constructorName], type.args.map(function (arg) { return inst(arg, freshTypeName, from, to); }))))();\n    }\n    if (type instanceof PolyType) {\n        return inst(type.monoType, freshTypeName, type.quantifiedVars, type.quantifiedVars.map(freshTypeName));\n    }\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n}\nexports.inst = inst;\nfunction apply(substitution, type) {\n    if (type instanceof TypeVar) {\n        return type.name in substitution ? substitution[type.name] : type;\n    }\n    if (type instanceof TypeFuncApp) {\n        return new (TypeFuncApp.bind.apply(TypeFuncApp, __spreadArrays([void 0, type.constructorName], type.args.map(function (arg) { return apply(substitution, arg); }))))();\n    }\n    if (type instanceof PolyType) {\n        return new PolyType(type.quantifiedVars, apply(substitution, type.monoType));\n    }\n    if (type) {\n        // type: Context\n        var context = type;\n        var mappedContext = {};\n        for (var key in context) {\n            mappedContext[key] = apply(substitution, context[key]);\n        }\n        return mappedContext;\n    }\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n}\nexports.apply = apply;\n/** Combines substitutions. Applies leftmost substitution first, e.g. apply(combine(a, b), e) == apply(b, apply(a, e)) */\nfunction combine() {\n    var substitutions = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        substitutions[_i] = arguments[_i];\n    }\n    if (substitutions.length === 0)\n        return {};\n    if (substitutions.length === 1)\n        return substitutions[0];\n    if (substitutions.length > 2)\n        return combine(substitutions[0], combine.apply(void 0, substitutions.slice(1)));\n    var a = substitutions[0];\n    var b = substitutions[1];\n    var newSubstitution = {};\n    for (var key in a) {\n        newSubstitution[key] = apply(b, a[key]);\n    }\n    for (var key in b) {\n        if (!(key in a)) {\n            newSubstitution[key] = b[key];\n        }\n    }\n    return newSubstitution;\n}\nexports.combine = combine;\n/** Returns a unifying susbtitution to unify two monotypes. Throws a TypeInferenceError iff no such substitution exists */\nfunction unify(type1, type2) {\n    var _a;\n    if (type1 instanceof TypeVar) {\n        if (type2 instanceof TypeVar && type1.name == type2.name) {\n            return {};\n        }\n        if (contains(type2, type1)) {\n            throw new TypeInferenceError('Occurs check failed. `' + type1.toString() + '` occurs in `' + type2.toString() + '` so unifying them would create an infinite type.');\n        }\n        return _a = {}, _a[type1.name] = type2, _a;\n    }\n    if (type2 instanceof TypeVar) {\n        return unify(type2, type1);\n    }\n    if (type1 instanceof TypeFuncApp && type2 instanceof TypeFuncApp) {\n        if (type1.constructorName !== type2.constructorName) {\n            throw new TypeInferenceError('Could not unify types `' + type1.toString() + '` and `' + type2.toString() + '` with different constructors `' + type1.constructorName + '` and `' + type2.constructorName + '`');\n        }\n        if (type1.args.length !== type2.args.length) {\n            throw new TypeInferenceError('Could not unify types `' + type1.toString() + '` and `' + type2.toString() + '` with different argument list lengths `' + type1.args.length + '` and `' + type2.args.length + '`');\n        }\n        var sub = {};\n        for (var i = 0; i < type1.args.length; i++) {\n            sub = combine(sub, unify(apply(sub, type1.args[i]), apply(sub, type2.args[i])));\n        }\n        return sub;\n    }\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n}\nexports.unify = unify;\n/** Returns a collection with duplicate elements removed */\nfunction unique(xs) {\n    var vs = [];\n    new Set(xs).forEach(function (x) { return vs.push(x); });\n    return vs;\n}\nexports.unique = unique;\n/** Returns the first collection with any elements in the second removed, i.e. a \\ b */\nfunction diff(a, b) {\n    var bset = new Set(b);\n    return a.filter(function (v) { return !bset.has(v); });\n}\nexports.diff = diff;\n/** Returns a list of free type variable names in a given type or context */\nfunction freeVars(type) {\n    if (type instanceof PolyType) {\n        return diff(freeVars(type.monoType), type.quantifiedVars);\n    }\n    if (type instanceof TypeVar) {\n        return [type.name];\n    }\n    if (type instanceof TypeFuncApp) {\n        return type.args.map(freeVars).reduce(function (acc, cur) { return __spreadArrays(acc, cur); }, []);\n    }\n    if (type) {\n        // type: Context\n        return Object.values(type).map(freeVars).reduce(function (acc, cur) { return __spreadArrays(acc, cur); }, []);\n    }\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n}\nexports.freeVars = freeVars;\n/** Fully generalises a monotype type, for-all qualifying any free type variables not free in the context */\nfunction generalise(ctx, type) {\n    return new PolyType(unique(diff(freeVars(type), freeVars(ctx))), type);\n}\nexports.generalise = generalise;\n/* Parser */\n// expr ::= identifier # var\n//        | ( \\ identifier -> expr ) # abs\n//        | ( expr )\n//        | expr expr # app\n//        | ( let identifier = expr in expr ) # let\n// expr ::= identifier expr' # var\n//        | ( \\ identifier -> expr ) expr' # abs\n//        | ( expr ) expr'\n//        | ( let identifier = expr in expr ) expr' # let\n// expr' ::= expr A' | eps # app\nvar ParseError = /** @class */ (function (_super) {\n    __extends(ParseError, _super);\n    function ParseError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \"ParseError\";\n        return _this;\n    }\n    return ParseError;\n}(Error));\nexports.ParseError = ParseError;\nvar genlex = new masala_parser_1.GenLex();\nvar identifier = genlex.tokenize(masala_parser_1.C.charIn('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789*+-/%<>^:_|&!\\'').rep().map(function (t) { return t.join(); }), 'identifier');\nvar letTok = genlex.tokenize(masala_parser_1.C.string('let '), 'let');\nvar inTok = genlex.tokenize(masala_parser_1.C.string('in '), 'in');\nvar charLiteral = genlex.tokenize(masala_parser_1.C.charLiteral(), 'char');\nvar stringLiteral = genlex.tokenize(masala_parser_1.C.stringLiteral(), 'string');\n// const numberLiteral = genlex.tokenize(N.number(), 'number');\nvar numberLiteral = genlex.tokenize(masala_parser_1.N.integer(), 'number');\nvar lbracket = genlex.tokenize(masala_parser_1.C.char('['), 'lbracket');\nvar rbracket = genlex.tokenize(masala_parser_1.C.char(']'), 'rbracket');\nvar backslash = genlex.tokenize(masala_parser_1.C.char('\\\\'), 'backslash');\nvar arrow = genlex.tokenize(masala_parser_1.C.string('->'), 'arrow');\nvar lparen = genlex.tokenize(masala_parser_1.C.char('('), 'lparen');\nvar rparen = genlex.tokenize(masala_parser_1.C.char(')'), 'rparen');\nvar equal = genlex.tokenize(masala_parser_1.C.char('='), 'equal');\nvar comma = genlex.tokenize(masala_parser_1.C.char(','), 'comma');\nvar expression = function () {\n    return masala_parser_1.F.try(LIT_NUM())\n        .or(masala_parser_1.F.try(LIT_CHAR()))\n        .or(masala_parser_1.F.try(LIT_STRING()))\n        .or(masala_parser_1.F.try(TUPLE()))\n        .or(masala_parser_1.F.try(LIST()))\n        .or(masala_parser_1.F.try(VAR()))\n        .or(masala_parser_1.F.try(ABS()))\n        .or(masala_parser_1.F.try(LET()))\n        .or(masala_parser_1.F.try(PAR()))\n        .rep().array().map(nestLeft);\n};\n/* Construct-specific parsers */\n// We have to SHOUT as var and let are restricted keywords in JavaScript\nvar LIT_NUM = function () { return numberLiteral.map(function (value, r) { return new NumberLiteral(value, getPos(r)); }); };\nvar LIT_CHAR = function () { return charLiteral.map(function (value, r) { return new CharLiteral(value, getPos(r)); }); };\nvar LIT_STRING = function () { return stringLiteral.map(toCharList); };\nvar TUPLE = function () { return lparen.map(function (v, r) { return r.location() - 1; }).then((masala_parser_1.F.lazy(expression).then((comma.drop().then(masala_parser_1.F.lazy(expression))).rep())).array()).then(rparen.map(function (s, r) { return getPos(r).end; })).map(toTuple); };\nvar LIST = function () { return lbracket.map(function (v, r) { return r.location() - 1; }).then((masala_parser_1.F.lazy(expression).then((comma.drop().then(masala_parser_1.F.lazy(expression))).optrep())).opt()).then(rbracket.map(function (s, r) { return getPos(r).end; })).map(toList); };\nvar VAR = function () { return identifier.map(function (value, r) { return new Var(value, getPos(r)); }); };\nvar ABS = function () { return backslash.map(function (v, r) { return r.location() - 1; }).then(identifier).then(arrow.drop()).then(masala_parser_1.F.lazy(expression)).map(function (tuple, r) { return new Abs(tuple.at(1), tuple.at(2), { start: tuple.at(0), end: r.location() }); }); };\nvar PAR = function () { return lparen.drop().then(masala_parser_1.F.lazy(expression)).then(rparen.drop()).single().map(expandPos); };\nvar LET = function () { return letTok.map(function (v, r) { return getPos(r).start; }).then(identifier).then(equal.drop()).then(masala_parser_1.F.lazy(expression)).then(inTok.drop()).then(masala_parser_1.F.lazy(expression)).map(function (tuple, r) { return new Let(tuple.at(1), tuple.at(2), tuple.at(3), { start: tuple.at(0), end: r.location() }); }); };\nvar nestLeft = function (v) { return v.reduce(function (prev, cur) { return new App(prev, cur, { start: prev.pos.start, end: cur.pos.end }); }); };\nvar toCharList = function (string, r) {\n    var chars = string.split('');\n    var pos = getPos(r);\n    var expr = new Var('[]', { start: pos.end - 1, end: pos.end });\n    for (var i = chars.length - 1; i >= 0; i--) {\n        var charPos = { start: pos.start + 1 + i, end: pos.start + 2 + i };\n        expr = new App(new App(new Var(':', charPos), new CharLiteral(chars[i], charPos), charPos), expr, { start: pos.start + 1 + i, end: pos.end - 1 });\n    }\n    expr.pos.start = pos.start;\n    expr.pos.end = pos.end;\n    return expr;\n};\nvar toList = function (tuple) {\n    var start = tuple.first();\n    var end = tuple.last();\n    var elements = tuple.at(1).map(function (t) { return t.array(); }).orElse([]);\n    var pos = { start: start, end: end };\n    var expr = new Var('[]', { start: pos.end - 1, end: pos.end });\n    for (var i = elements.length - 1; i >= 0; i--) {\n        expr = new App(new App(new Var(':', elements[i].pos), elements[i], elements[i].pos), expr, { start: elements[i].pos.start, end: pos.end });\n    }\n    expr.pos.start = pos.start;\n    expr.pos.end = pos.end;\n    return expr;\n};\nvar toTuple = function (tuple) {\n    var start = tuple.first();\n    var end = tuple.last();\n    var elements = tuple.at(1);\n    var result = nestLeft(__spreadArrays([new Var(','.repeat(elements.length - 1), { start: start, end: start + 1 })], elements));\n    result.pos.start = start;\n    result.pos.end = end;\n    return result;\n};\nvar getPos = function (r) {\n    var offset = r.getOffset() - 1;\n    var start = r.input.location(offset);\n    var guessedEnd = r.input.location(offset + 1);\n    var rawString = r.input.source.input.source.slice(start, guessedEnd);\n    var end = guessedEnd - (rawString.length - rawString.trimEnd().length);\n    return { start: start, end: end };\n};\nvar expandPos = function (v, r) {\n    var rawString = r.input.source.input.source;\n    v.pos.end += rawString.slice(v.pos.end).indexOf(')') + 1;\n    v.pos.start = rawString.slice(0, v.pos.start).lastIndexOf('(');\n    return v;\n};\nvar specialCases = function (code) {\n    if (code == 'let' || code.endsWith(' let')) {\n        return {\n            accepted: false,\n            issuePosition: { start: code.length - 3, end: code.length },\n            message: 'Failed to parse'\n        };\n    }\n    if (code == 'in' || code.endsWith(' in')) {\n        return {\n            accepted: false,\n            issuePosition: { start: code.length - 2, end: code.length },\n            message: 'Failed to parse'\n        };\n    }\n};\nvar parser = genlex.use(expression().then(masala_parser_1.F.eos().drop()).single());\nfunction parse(code, forResponse) {\n    if (forResponse === void 0) { forResponse = false; }\n    var specialCase = specialCases(code);\n    if (specialCase) {\n        if (forResponse)\n            return specialCase;\n        throw new ParseError('Failed to parse:\\n\\t' + code + '\\n\\t' + ' '.repeat(specialCase.issuePosition.start) + '^');\n    }\n    var response = parser.parse(masala_parser_1.Streams.ofString(code));\n    if (forResponse) {\n        if (response.isAccepted())\n            return { accepted: true, value: response.value };\n        return { accepted: false, issuePosition: { start: response.location(), end: code.length }, message: 'Failed to parse' };\n    }\n    if (response.isAccepted())\n        return response.value;\n    throw new ParseError('Failed to parse:\\n\\t' + code + '\\n\\t' + ' '.repeat(response.location()) + '^');\n}\nexports.parse = parse;\nvar typeUtils = { number: number, char: char, boolean: boolean, f: f, list: list, tuple: tuple, maybe: maybe, either: either, a: a, b: b, c: c, d: d, pt: pt, standardCtx: standardCtx };\nexports.typeUtils = typeUtils;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.infer = void 0;\nvar language_1 = require(\"language\");\nfunction infer(expr, forResponse, ctx) {\n    if (forResponse === void 0) { forResponse = false; }\n    if (ctx === void 0) { ctx = language_1.typeUtils.standardCtx; }\n    var typeCounter = 0;\n    var freshTypeName = function () { return \"t\" + typeCounter++; };\n    if (!forResponse)\n        return _infer(expr, ctx, freshTypeName)[0];\n    var steps = [];\n    var logger = function (message, notes) {\n        steps.push({ message: message, ast: cloneAst(expr, notes) });\n    };\n    try {\n        return {\n            accepted: true,\n            value: {\n                type: _infer(expr, ctx, freshTypeName, logger)[0],\n                steps: steps\n            }\n        };\n    }\n    catch (e) {\n        return {\n            accepted: false,\n            value: {\n                steps: steps\n            },\n            issuePosition: (e.name == language_1.TypeInferenceError.name && e.expr) ? e.expr.pos : expr.pos,\n            message: e.message\n        };\n    }\n}\nexports.infer = infer;\nvar cloneAst = function (expr, notes) {\n    if (expr instanceof language_1.CharLiteral)\n        return new language_1.CharLiteral(expr.value, expr.pos, notes.get(expr));\n    if (expr instanceof language_1.NumberLiteral)\n        return new language_1.NumberLiteral(expr.value, expr.pos, notes.get(expr));\n    if (expr instanceof language_1.Var)\n        return new language_1.Var(expr.name, expr.pos, notes.get(expr));\n    if (expr instanceof language_1.App)\n        return new language_1.App(cloneAst(expr.func, notes), cloneAst(expr.arg, notes), expr.pos, notes.get(expr));\n    if (expr instanceof language_1.Abs)\n        return new language_1.Abs(expr.param, cloneAst(expr.body, notes), expr.pos, notes.get(expr));\n    if (expr instanceof language_1.Let)\n        return new language_1.Let(expr.param, cloneAst(expr.def, notes), cloneAst(expr.body, notes), expr.pos, notes.get(expr));\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n};\nvar highlight = function (expr) {\n    var notes = new Map();\n    notes.set(expr, 'highlight');\n    return notes;\n};\nvar str = function (substitution, except) { return ('{ ' + Object.keys(substitution).filter(function (k) { return k !== except; }).map(function (k) { return k + ' ↦ ' + substitution[k].toString(); }).join(', ') + ' }').replace('{  }', '{}'); };\nfunction _infer(expr, ctx, freshTypeName, logger) {\n    var _a, _b;\n    if (logger === void 0) { logger = function () { }; }\n    if (expr instanceof language_1.CharLiteral) {\n        logger('We know the primitive `' + expr.toString() + '` is a `Char`', highlight(expr));\n        return [language_1.inst(new language_1.PolyType([], new language_1.TypeFuncApp('Char')), freshTypeName), {}];\n    }\n    if (expr instanceof language_1.NumberLiteral) {\n        logger('We know the primitive `' + expr.toString() + '` is an `Int`', highlight(expr));\n        return [language_1.inst(new language_1.PolyType([], new language_1.TypeFuncApp('Int')), freshTypeName), {}];\n    }\n    if (expr instanceof language_1.Var) {\n        var type = ctx[expr.name];\n        if (!type) {\n            logger('We try to look up the variable `' + expr.toString() + '` but find it is not in scope. We stop here as this is an error.', highlight(expr));\n            var err = new language_1.TypeInferenceError('`' + expr.name + '` is not in scope', expr);\n            throw err;\n        }\n        var instantiatedType = language_1.inst(type, freshTypeName);\n        logger('We can look up the variable `' + expr.toString() + '` and find it has type `' + type.toString() + '`' + (type.quantifiedVars.length ? '\\nWe instatiate this type with fresh type variables to get `' + instantiatedType.toString() + '`' : ''), highlight(expr));\n        return [instantiatedType, {}];\n    }\n    if (expr instanceof language_1.App) {\n        var _c = _infer(expr.func, ctx, freshTypeName, logger), funcType = _c[0], funcSubstitution = _c[1];\n        var _d = _infer(expr.arg, language_1.apply(funcSubstitution, ctx), freshTypeName, logger), argType = _d[0], argSubstitution = _d[1];\n        var t = new language_1.TypeVar(freshTypeName());\n        // Give an easier to read and understand message if we can, otherwise default to the more general case\n        var firstPartOfLogMessage = (funcType instanceof language_1.TypeFuncApp && funcType.constructorName == '->')\n            ? 'In function application, the function must accept the expected argument type.\\nBefore unification, the function has type `' + funcType.toString() + '`\\n\\nTherefore we unify:\\nFunction accepts `' + funcType.args[0].toString() + '`\\nArgument has type `' + argType.toString() + '`\\n\\n'\n            : 'In function application, the function must accept the expected argument type and returns some other type.\\n\\nTherefore we unify:\\nFunction type `' + funcType.toString() + '`\\nArgument to fresh type `' + new language_1.TypeFuncApp(\"->\", argType, t).toString() + '`\\n\\n';\n        var unifiedSubstitution = void 0;\n        try {\n            unifiedSubstitution = language_1.unify(language_1.apply(argSubstitution, funcType), new language_1.TypeFuncApp(\"->\", argType, t));\n        }\n        catch (err) {\n            logger(firstPartOfLogMessage + 'However, these two types are not unifiable. We stop here as this is an error.\\n\\nMore details:\\n' + err.message, highlight(expr));\n            err.expr = expr;\n            throw err;\n        }\n        var exprType = language_1.apply(unifiedSubstitution, t);\n        logger(firstPartOfLogMessage + 'This gives the substitution `' + str(unifiedSubstitution, t.name) + '`\\nAnd the function\\'s return type as `' + exprType.toString() + '`', highlight(expr));\n        return [exprType, language_1.combine(funcSubstitution, argSubstitution, unifiedSubstitution)];\n    }\n    if (expr instanceof language_1.Abs) {\n        var t = new language_1.TypeVar(freshTypeName());\n        logger('Our function definition binds `' + expr.param + '` in the body to the fresh type `' + t.toString() + '`', highlight(expr));\n        var _e = _infer(expr.body, __assign(__assign({}, ctx), (_a = {}, _a[expr.param] = new language_1.PolyType([], t), _a)), freshTypeName, logger), bodyType = _e[0], bodySubstitution = _e[1];\n        var type = language_1.apply(bodySubstitution, new language_1.TypeFuncApp(\"->\", t, bodyType));\n        logger((bodySubstitution[t.name] ? 'We apply the substitution `{ ' + t.name + ' ↦ ' + bodySubstitution[t.name].toString() + ' }` to get the parameter\\'s type `' + type.args[0].toString() + '`.\\n' : '') + 'The return type is given by the function body\\'s type `' + type.args[1].toString() + '`\\nTherefore the overall type is `' + type.toString() + '`', highlight(expr));\n        return [type, bodySubstitution];\n    }\n    if (expr instanceof language_1.Let) {\n        var _f = _infer(expr.def, ctx, freshTypeName, logger), defType = _f[0], defSubstitution = _f[1];\n        var generalisedDefType = language_1.generalise(language_1.apply(defSubstitution, ctx), defType);\n        logger('Our let statement binds `' + expr.param + '` in the body to the type `' + generalisedDefType.toString() + '`', highlight(expr));\n        var _g = _infer(expr.body, __assign(__assign({}, language_1.apply(defSubstitution, ctx)), (_b = {}, _b[expr.param] = generalisedDefType, _b)), freshTypeName, logger), bodyType = _g[0], bodySubstitution = _g[1];\n        logger('Our let statement then takes its body\\'s type `' + bodyType.toString() + '`', highlight(expr));\n        return [bodyType, language_1.combine(defSubstitution, bodySubstitution)];\n    }\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n}\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.infer = exports.unifySubtitutions = void 0;\nvar language_1 = require(\"language\");\nfunction unifySubtitutions(s0, s1) {\n    // const d0 = diff(Object.keys(s0), Object.keys(s1));\n    // const d1 = diff(Object.keys(s1), Object.keys(s0));\n    var dn = Object.keys(s0).filter(function (k) { return k in s1; });\n    var t0 = Object.entries(s0).filter(function (_a) {\n        var k = _a[0], v = _a[1];\n        return !(k in s1);\n    });\n    var t1 = Object.entries(s1).filter(function (_a) {\n        var k = _a[0], v = _a[1];\n        return !(k in s0);\n    });\n    var s = t0.reduce(function (acc, cur) { acc[cur[0]] = cur[1]; return acc; }, {});\n    for (var i = 0; i < t1.length; i++) {\n        var _a = [t1[i][0], t1[i][1]], alpha = _a[0], tau = _a[1];\n        var tauPrime = language_1.apply(s, tau);\n        if (language_1.freeVars(tauPrime).includes(alpha)) {\n            throw new language_1.TypeInferenceError('Occurs check failed. `' + alpha.toString() + '` occurs in `' + tauPrime.toString() + '` so unifying them would create an infinite type.');\n        }\n        s[alpha] = tauPrime;\n    }\n    var v = s;\n    for (var i = 0; i < dn.length; i++) {\n        var beta = new language_1.TypeVar(dn[i]);\n        var tau0 = language_1.apply(v, language_1.apply(s0, beta));\n        var tau1 = language_1.apply(v, language_1.apply(s1, beta));\n        if (language_1.freeVars(tau0).includes(dn[i])) {\n            throw new language_1.TypeInferenceError('Occurs check failed. `' + dn[i].toString() + '` occurs in `' + tau0.toString() + '` so unifying them would create an infinite type.');\n        }\n        if (language_1.freeVars(tau1).includes(dn[i])) {\n            throw new language_1.TypeInferenceError('Occurs check failed. `' + dn[i].toString() + '` occurs in `' + tau1.toString() + '` so unifying them would create an infinite type.');\n        }\n        v = language_1.combine(v, language_1.unify(tau0, tau1));\n    }\n    return v;\n}\nexports.unifySubtitutions = unifySubtitutions;\nfunction infer(expr, forResponse, ctx) {\n    if (forResponse === void 0) { forResponse = false; }\n    if (ctx === void 0) { ctx = language_1.typeUtils.standardCtx; }\n    var typeCounter = 0;\n    var freshTypeName = function () { return \"t\" + typeCounter++; };\n    if (!forResponse)\n        return _infer(expr, ctx, freshTypeName)[0];\n    var steps = [];\n    var logger = function (message, notes) {\n        steps.push({ message: message, ast: cloneAst(expr, notes) });\n    };\n    try {\n        return {\n            accepted: true,\n            value: {\n                type: _infer(expr, ctx, freshTypeName, logger)[0],\n                steps: steps\n            }\n        };\n    }\n    catch (e) {\n        return {\n            accepted: false,\n            value: {\n                steps: steps\n            },\n            issuePosition: (e.name == language_1.TypeInferenceError.name && e.expr) ? e.expr.pos : expr.pos,\n            message: e.message\n        };\n    }\n}\nexports.infer = infer;\nvar cloneAst = function (expr, notes) {\n    if (expr instanceof language_1.CharLiteral)\n        return new language_1.CharLiteral(expr.value, expr.pos, notes.get(expr));\n    if (expr instanceof language_1.NumberLiteral)\n        return new language_1.NumberLiteral(expr.value, expr.pos, notes.get(expr));\n    if (expr instanceof language_1.Var)\n        return new language_1.Var(expr.name, expr.pos, notes.get(expr));\n    if (expr instanceof language_1.App)\n        return new language_1.App(cloneAst(expr.func, notes), cloneAst(expr.arg, notes), expr.pos, notes.get(expr));\n    if (expr instanceof language_1.Abs)\n        return new language_1.Abs(expr.param, cloneAst(expr.body, notes), expr.pos, notes.get(expr));\n    if (expr instanceof language_1.Let)\n        return new language_1.Let(expr.param, cloneAst(expr.def, notes), cloneAst(expr.body, notes), expr.pos, notes.get(expr));\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n};\nvar highlight = function (expr) {\n    var notes = new Map();\n    notes.set(expr, 'highlight');\n    return notes;\n};\nvar str = function (substitution, except) { return ('{ ' + Object.keys(substitution).filter(function (k) { return k !== except; }).map(function (k) { return k + ' ↦ ' + substitution[k].toString(); }).join(', ') + ' }').replace('{  }', '{}'); };\nfunction _infer(expr, ctx, freshTypeName, logger) {\n    var _a, _b;\n    if (logger === void 0) { logger = function () { }; }\n    if (expr instanceof language_1.CharLiteral) {\n        logger('We know the primitive `' + expr.toString() + '` is a `Char`', highlight(expr));\n        return [language_1.inst(new language_1.PolyType([], new language_1.TypeFuncApp('Char')), freshTypeName), {}];\n    }\n    if (expr instanceof language_1.NumberLiteral) {\n        logger('We know the primitive `' + expr.toString() + '` is an `Int`', highlight(expr));\n        return [language_1.inst(new language_1.PolyType([], new language_1.TypeFuncApp('Int')), freshTypeName), {}];\n    }\n    if (expr instanceof language_1.Var) {\n        var type = ctx[expr.name];\n        if (!type) {\n            logger('We try to look up the variable `' + expr.toString() + '` but find it is not in scope. We stop here as this is an error.', highlight(expr));\n            var err = new language_1.TypeInferenceError('`' + expr.name + '` is not in scope', expr);\n            throw err;\n        }\n        var instantiatedType = language_1.inst(type, freshTypeName);\n        logger('We can look up the variable `' + expr.toString() + '` and find it has type `' + type.toString() + '`' + (type.quantifiedVars.length ? '\\nWe instatiate this type with fresh type variables to get `' + instantiatedType.toString() + '`' : ''), highlight(expr));\n        return [instantiatedType, {}];\n    }\n    if (expr instanceof language_1.App) {\n        var _c = _infer(expr.func, ctx, freshTypeName, logger), funcType = _c[0], funcSubstitution = _c[1];\n        var _d = _infer(expr.arg, ctx, freshTypeName, logger), argType = _d[0], argSubstitution = _d[1];\n        var t = new language_1.TypeVar(freshTypeName());\n        // Give an easier to read and understand message if we can, otherwise default to the more general case\n        var firstPartOfLogMessage1 = 'We first determine the function and argument type separately as `' + funcType.toString() + '` and `' + argType.toString() + '` respectively.\\nFor these we have substitutions `' + str(funcSubstitution) + '` and `' + str(argSubstitution) + '` to unify.\\n\\n';\n        // S'\n        var unifiedSubsitution = void 0;\n        try {\n            unifiedSubsitution = unifySubtitutions(funcSubstitution, argSubstitution);\n        }\n        catch (err) {\n            logger(firstPartOfLogMessage1 + 'However, these two subsitutions cannot be unified. We stop here as this is an error.\\n\\nMore details:\\n' + err.message, highlight(expr));\n            err.expr = expr;\n            throw err;\n        }\n        var funcType2 = language_1.apply(unifiedSubsitution, funcType);\n        var argType2 = language_1.apply(unifiedSubsitution, argType);\n        // Give an easier to read and understand message if we can, otherwise default to the more general case\n        var firstPartOfLogMessage2 = firstPartOfLogMessage1 + 'These can be unified as `' + str(unifiedSubsitution) + '`\\n\\n' + ((funcType instanceof language_1.TypeFuncApp && funcType.constructorName == '->')\n            ? 'The function must accept the expected argument type.\\nThe function type after applying the unified substitution is `' + funcType2.toString() + '`\\n\\nTherefore we unify:\\nFunction accepts `' + funcType2.args[0].toString() + '`\\nArgument has type `' + argType2.toString() + '`\\n\\n'\n            : 'The function must accept the expected argument type.\\n\\nTherefore we unify:\\nFunction type `' + funcType2.toString() + '`\\nArgument to fresh type `' + new language_1.TypeFuncApp(\"->\", argType2, t).toString() + '`\\n\\n');\n        // V\n        var unifyingSubstitution = void 0;\n        try {\n            unifyingSubstitution = language_1.unify(funcType2, new language_1.TypeFuncApp(\"->\", argType2, t));\n        }\n        catch (err) {\n            logger(firstPartOfLogMessage2 + 'However, these two types are not unifiable. We stop here as this is an error.\\n\\nMore details:\\n' + err.message, highlight(expr));\n            err.expr = expr;\n            throw err;\n        }\n        var exprType = language_1.apply(unifyingSubstitution, t);\n        logger(firstPartOfLogMessage2 + 'This gives the final substitution `' + str(unifyingSubstitution, t.name) + '`\\nAnd the function\\'s return type as `' + exprType.toString() + '`', highlight(expr));\n        return [exprType, language_1.combine(funcSubstitution, unifiedSubsitution, unifyingSubstitution)];\n    }\n    if (expr instanceof language_1.Abs) {\n        var t = new language_1.TypeVar(freshTypeName());\n        logger('Our function definition binds `' + expr.param + '` in the body to the fresh type `' + t.toString() + '`', highlight(expr));\n        var _e = _infer(expr.body, __assign(__assign({}, ctx), (_a = {}, _a[expr.param] = new language_1.PolyType([], t), _a)), freshTypeName, logger), bodyType = _e[0], bodySubstitution = _e[1];\n        var type = language_1.apply(bodySubstitution, new language_1.TypeFuncApp(\"->\", t, bodyType));\n        logger((bodySubstitution[t.name] ? 'We apply the substitution `{ ' + t.name + ' ↦ ' + bodySubstitution[t.name].toString() + ' }` to get the parameter\\'s type `' + type.args[0].toString() + '`.\\n' : '') + 'The return type is given by the function body\\'s type `' + type.args[1].toString() + '`\\nTherefore the overall type is `' + type.toString() + '`', highlight(expr));\n        return [type, bodySubstitution];\n    }\n    if (expr instanceof language_1.Let) {\n        var _f = _infer(expr.def, ctx, freshTypeName, logger), defType = _f[0], defSubstitution = _f[1];\n        var generalisedDefType = language_1.generalise(language_1.apply(defSubstitution, ctx), defType);\n        logger('Our let statement binds `' + expr.param + '` in the body to the type `' + generalisedDefType.toString() + '`', highlight(expr));\n        var _g = _infer(expr.body, __assign(__assign({}, language_1.apply(defSubstitution, ctx)), (_b = {}, _b[expr.param] = generalisedDefType, _b)), freshTypeName, logger), bodyType = _g[0], bodySubstitution = _g[1];\n        logger('Our let statement then takes its body\\'s type `' + bodyType.toString() + '`', highlight(expr));\n        return [bodyType, language_1.combine(defSubstitution, bodySubstitution)];\n    }\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n}\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.infer = void 0;\nvar language_1 = require(\"language\");\nfunction infer(expr, forResponse, ctx) {\n    if (forResponse === void 0) { forResponse = false; }\n    if (ctx === void 0) { ctx = language_1.typeUtils.standardCtx; }\n    var typeCounter = 0;\n    var freshTypeName = function () { return \"t\" + typeCounter++; };\n    var rootType = new language_1.TypeVar(freshTypeName());\n    if (!forResponse) {\n        var s = _infer(expr, ctx, rootType, freshTypeName);\n        return s[rootType.name];\n    }\n    var steps = [];\n    var logger = function (message, notes) {\n        steps.push({ message: message, ast: cloneAst(expr, notes) });\n    };\n    logger('We start algorithm M by assigning the root node a fresh type `' + rootType.toString() + '`', highlight(expr));\n    try {\n        var s = _infer(expr, ctx, rootType, freshTypeName, logger);\n        // We'll already have just logged str(s), so probably not too much point doing it again\n        logger('We can extract the root type `' + rootType.toString() + '` from the most recent substitution to get expression\\'s type as `' + s[rootType.name].toString() + '`', highlight(expr));\n        return {\n            accepted: true,\n            value: {\n                type: s[rootType.name],\n                steps: steps\n            }\n        };\n    }\n    catch (e) {\n        return {\n            accepted: false,\n            value: {\n                steps: steps\n            },\n            issuePosition: (e.name == language_1.TypeInferenceError.name && e.expr) ? e.expr.pos : expr.pos,\n            message: e.message\n        };\n    }\n}\nexports.infer = infer;\nvar cloneAst = function (expr, notes) {\n    if (expr instanceof language_1.CharLiteral)\n        return new language_1.CharLiteral(expr.value, expr.pos, notes.get(expr));\n    if (expr instanceof language_1.NumberLiteral)\n        return new language_1.NumberLiteral(expr.value, expr.pos, notes.get(expr));\n    if (expr instanceof language_1.Var)\n        return new language_1.Var(expr.name, expr.pos, notes.get(expr));\n    if (expr instanceof language_1.App)\n        return new language_1.App(cloneAst(expr.func, notes), cloneAst(expr.arg, notes), expr.pos, notes.get(expr));\n    if (expr instanceof language_1.Abs)\n        return new language_1.Abs(expr.param, cloneAst(expr.body, notes), expr.pos, notes.get(expr));\n    if (expr instanceof language_1.Let)\n        return new language_1.Let(expr.param, cloneAst(expr.def, notes), cloneAst(expr.body, notes), expr.pos, notes.get(expr));\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n};\nvar highlight = function (expr) {\n    var notes = new Map();\n    notes.set(expr, 'highlight');\n    return notes;\n};\nvar str = function (substitution, except) { return ('{ ' + Object.keys(substitution).filter(function (k) { return k !== except; }).map(function (k) { return k + ' ↦ ' + substitution[k].toString(); }).join(', ') + ' }').replace('{  }', '{}'); };\nfunction _infer(expr, ctx, type, freshTypeName, logger) {\n    var _a, _b;\n    if (logger === void 0) { logger = function () { }; }\n    if (expr instanceof language_1.CharLiteral) {\n        var firstPartOfLogMessage = 'We expect the type to unify with `' + type.toString() + '`, and we know the primitive `' + expr.toString() + '` is a `Char`.';\n        try {\n            var substitution = language_1.unify(type, language_1.inst(new language_1.PolyType([], new language_1.TypeFuncApp('Char')), freshTypeName));\n            logger(firstPartOfLogMessage + '\\nThese unify, giving the substitution `' + str(substitution) + '`', highlight(expr));\n            return substitution;\n        }\n        catch (err) {\n            logger(firstPartOfLogMessage + '\\nHowever, these two types are not unifiable. We stop here as this is an error.\\n\\nMore details:\\n' + err.message, highlight(expr));\n            err.expr = expr;\n            throw err;\n        }\n    }\n    if (expr instanceof language_1.NumberLiteral) {\n        var firstPartOfLogMessage = 'We expect the type to unify with `' + type.toString() + '`, and we know the primitive `' + expr.toString() + '` is an `Int`.';\n        try {\n            var substitution = language_1.unify(type, language_1.inst(new language_1.PolyType([], new language_1.TypeFuncApp('Int')), freshTypeName));\n            logger(firstPartOfLogMessage + '\\nThese unify, giving the substitution `' + str(substitution) + '`', highlight(expr));\n            return substitution;\n        }\n        catch (err) {\n            logger(firstPartOfLogMessage + '\\nHowever, these two types are not unifiable. We stop here as this is an error.\\n\\nMore details:\\n' + err.message, highlight(expr));\n            err.expr = expr;\n            throw err;\n        }\n    }\n    if (expr instanceof language_1.Var) {\n        var varType = ctx[expr.name];\n        if (!varType) {\n            logger('We try to look up the variable `' + expr.toString() + '` but find it is not in scope. We stop here as this is an error.', highlight(expr));\n            var err = new language_1.TypeInferenceError('`' + expr.name + '` is not in scope', expr);\n            throw err;\n        }\n        var instantiatedType = language_1.inst(varType, freshTypeName);\n        var firstPartOfLogMessage = 'We expect this variable to unify with `' + type.toString() + '`\\nWe look up the variable `' + expr.toString() + '` and find it has type `' + varType.toString() + '`' + (varType.quantifiedVars.length ? '\\nWe instatiate this type with fresh type variables to get `' + instantiatedType.toString() + '`' : '');\n        try {\n            var substitution = language_1.unify(type, instantiatedType);\n            logger(firstPartOfLogMessage + '\\nThese unify, giving the substitution `' + str(substitution) + '`', highlight(expr));\n            return substitution;\n        }\n        catch (err) {\n            logger(firstPartOfLogMessage + '\\nHowever, these two types are not unifiable. We stop here as this is an error.\\n\\nMore details:\\n' + err.message, highlight(expr));\n            err.expr = expr;\n            throw err;\n        }\n    }\n    if (expr instanceof language_1.App) {\n        var beta = new language_1.TypeVar(freshTypeName());\n        var funcSubstitution = _infer(expr.func, ctx, new language_1.TypeFuncApp('->', beta, type), freshTypeName, logger);\n        var argSubstitution = _infer(expr.arg, language_1.apply(funcSubstitution, ctx), language_1.apply(funcSubstitution, beta), freshTypeName, logger);\n        var t = new language_1.TypeVar(freshTypeName());\n        var combinedSubstitution = language_1.combine(funcSubstitution, argSubstitution);\n        logger('As the argument unifies with the function definition the function application is valid, giving a combined substitution of `' + str(combinedSubstitution) + '`', highlight(expr));\n        return combinedSubstitution;\n    }\n    if (expr instanceof language_1.Abs) {\n        var beta1 = new language_1.TypeVar(freshTypeName());\n        var beta2 = new language_1.TypeVar(freshTypeName());\n        var functionType = new language_1.TypeFuncApp('->', beta1, beta2);\n        var firstPartOfLogMessage = 'We expect this function definition to unify with a fresh function type `' + functionType.toString() + '` to unify with `' + type.toString() + '`';\n        var s1 = void 0;\n        try {\n            s1 = language_1.unify(type, functionType);\n            logger(firstPartOfLogMessage + '\\nThese unify, giving `' + str(s1) + '`\\nWe next will unify the body with `' + beta2.toString() + '`', highlight(expr));\n        }\n        catch (err) {\n            logger(firstPartOfLogMessage + '\\nHowever, these two types are not unifiable. We stop here as this is an error.\\n\\nMore details:\\n' + err.message, highlight(expr));\n            err.expr = expr;\n            throw err;\n        }\n        var s2 = _infer(expr.body, __assign(__assign({}, language_1.apply(s1, ctx)), (_a = {}, _a[expr.param] = new language_1.PolyType([], language_1.apply(s1, beta1)), _a)), language_1.apply(s1, beta2), freshTypeName, logger);\n        var combinedSubstitution = language_1.combine(s1, s2);\n        logger('Combining the function and body substitutions gives `' + str(combinedSubstitution) + '`', highlight(expr));\n        return combinedSubstitution;\n    }\n    if (expr instanceof language_1.Let) {\n        var beta = new language_1.TypeVar(freshTypeName());\n        logger('We create a new type variable `' + beta.toString() + '` for this let statement\\'s parameter `' + expr.param + '`, then infer on the parameter and body', highlight(expr));\n        var s1 = _infer(expr.def, ctx, beta, freshTypeName, logger);\n        var s2 = _infer(expr.body, __assign(__assign({}, language_1.apply(s1, ctx)), (_b = {}, _b[expr.param] = language_1.generalise(language_1.apply(s1, ctx), language_1.apply(s1, beta)), _b)), language_1.apply(s1, type), freshTypeName, logger);\n        var combinedSubstitution = language_1.combine(s1, s2);\n        logger('Combining the parameter and body substitutions gives `' + str(combinedSubstitution) + '`', highlight(expr));\n        return combinedSubstitution;\n    }\n    // Should be unreachable...\n    throw new Error('Internal error, this should never happen');\n}\n","const dev = {\n    analytics: {\n        enabled: true,\n        url: 'https://fghxabnlad.execute-api.eu-west-1.amazonaws.com/'\n    }\n};\n\nconst prod = {\n    analytics: {\n        enabled: true,\n        url: 'https://5lpondcp9g.execute-api.eu-west-1.amazonaws.com/'\n    }\n};\n\nconst config = process.env.REACT_APP_STAGE === 'prod' ? prod : dev;\nexport default config;","import config from \"./config\";\n\nconst useAnalytics = config.analytics.enabled && navigator.doNotTrack !== \"1\";\nconst streamId = Math.random().toString(36).slice(2);\n\nexport const a = useAnalytics ? (data: any) => {\n  fetch(config.analytics.url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ project: 'cs310', streamId, data }) })\n} : () => {};\n\nconst debounce = <T extends Function>(fn: T, delayInMiliseconds: number): T => {\n  let timeout: NodeJS.Timeout | undefined;\n  return ((...args: any) => {\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      timeout = undefined;\n      fn(...args);\n    }, delayInMiliseconds)\n  }) as any as T;\n}\n\nexport const b = debounce(a, 1000);\n\nexport default a;","import React, { ReactNode } from 'react';\nimport { Expr, Var, App, Abs, Let, NumberLiteral, CharLiteral } from 'language'\n\ntype HoverCallback = (active: boolean, p: { start: number, end: number }) => void; \n\nfunction ASTView({ ast, hoverCallback }: { ast: Expr, hoverCallback: HoverCallback }) {\n    return <div className=\"ast-view\"><NodeView node={ast} hoverCallback={hoverCallback} /></div>\n}\n\nfunction NodeView({ node, hoverCallback }: { node: Expr, hoverCallback: HoverCallback }) {\n    if (node instanceof CharLiteral || node instanceof NumberLiteral) {\n        return <NodeWrapperView node={node} hoverCallback={hoverCallback}>{node.value}</NodeWrapperView>;\n    }\n\n    if (node instanceof Var) {\n        return <NodeWrapperView node={node} hoverCallback={hoverCallback}>{node.name}</NodeWrapperView>;\n    }\n\n    if (node instanceof App) {\n        return <>\n            <NodeWrapperView node={node} hoverCallback={hoverCallback}><span className=\"sans-serif\">Function application</span></NodeWrapperView>\n            <NodeChildView><NodeView node={node.func} hoverCallback={hoverCallback} /></NodeChildView>\n            <NodeChildView><NodeView node={node.arg} hoverCallback={hoverCallback}/></NodeChildView>\n        </>;\n    }\n\n    if (node instanceof Abs) {\n        return <>\n            <NodeWrapperView node={node} hoverCallback={hoverCallback}>λ{node.param}</NodeWrapperView>\n            <NodeChildView symbol='->'><NodeView node={node.body} hoverCallback={hoverCallback}/></NodeChildView>\n        </>\n    }\n\n    if (node instanceof Let) {\n        return <>\n            <NodeWrapperView node={node} hoverCallback={hoverCallback}>let {node.param}</NodeWrapperView>\n            <NodeChildView symbol='='><NodeView node={node.def} hoverCallback={hoverCallback}/></NodeChildView>\n            <NodeChildView symbol='in'><NodeView node={node.body} hoverCallback={hoverCallback}/></NodeChildView>\n        </>\n    }\n\n    throw new Error('Attempted to display a node of invalid type ' + typeof node);\n}\n\nfunction NodeWrapperView({ children, node, hoverCallback }: { children: ReactNode, node: Expr, hoverCallback: HoverCallback }) {\n    return <div className={\"ast-node \" + (node.notes || '')} onMouseOver={() => hoverCallback(true, node.pos)} onMouseOut={() => hoverCallback(false, node.pos)}>{children}</div>;\n}\n\nfunction NodeChildView({ children, symbol }: { children: ReactNode, symbol?: string }) {\n    return <div className=\"ast-child\" data-symbol={symbol}>{children}</div>\n}\n\nexport default ASTView;","import React, { useEffect } from 'react';\nimport { parse } from 'language'\nimport { infer as inferW } from 'algorithm-w'\nimport { infer as inferWPrime } from 'algorithm-w-prime'\nimport { infer as inferM } from 'algorithm-m'\nimport ASTView from './ASTView';\n\nconst algorithms: { [key: string]: typeof inferW } = {\n  'w': inferW,\n  'm': inferM,\n  'w\\'': inferWPrime\n}\n\nexport interface Highlight {\n  start: number;\n  end: number;\n  className: string;\n}\n\nfunction ResultView({ code, algorithm, setHighlights }: { code: string, algorithm: 'w' | 'w\\'' | 'm', setHighlights: (h: Highlight[]) => void }) {\n  // Parse the code, highlighting any errors\n  const parseResult = parse(code, true);\n  useEffect(() => setHighlights(parseResult.accepted ? [] : [{ start: parseResult.issuePosition.start, end: parseResult.issuePosition.end, className: 'highlight-error' }]), [parseResult, setHighlights]);\n\n  // Infer the types, highlighting any errors\n  const inferenceResult = !parseResult.accepted ? undefined! : algorithms[algorithm](parseResult.value, true);\n  useEffect(() => inferenceResult && setHighlights(inferenceResult.accepted ? [] : [{ start: inferenceResult.issuePosition.start, end: inferenceResult.issuePosition.end, className: 'highlight-error' }]), [inferenceResult, setHighlights]);\n\n  if (!parseResult.accepted) {\n    return <>\n      <h2>Parse error</h2>\n      <p>{parseResult.message}</p>\n    </>;\n  }\n\n  const hoverCallback = createHoverCallback(setHighlights, inferenceResult.accepted ? [] : [{ start: inferenceResult.issuePosition.start, end: inferenceResult.issuePosition.end, className: 'highlight-error' }]);\n  if (inferenceResult.value!.steps.length === 0) {\n    <>\n      <h2>Type-inference error</h2>\n      <p>Something went wrong trying to infer types</p>\n\n      <h2>AST</h2>\n      <ASTView ast={parseResult.value} hoverCallback={hoverCallback} />\n    </>\n  }\n\n  return <>    \n    {inferenceResult.accepted\n    ? <><h2>Expression type</h2><p><code>{inferenceResult.value.type.toString()}</code></p></>\n    : <><h2>Type error</h2><p>The expression does not have a valid type</p></>}\n\n    <h2>Type derivation</h2>\n    {inferenceResult.value!.steps.map((step, i) => <div key={i} className='type-derivation-step'><h3>Step {i+1}</h3><p>{step.message.split('`').map((s, j) => j % 2 === 0 ? s : <code key={j}>{s}</code>)}</p><ASTView ast={step.ast} hoverCallback={hoverCallback} /></div>)}\n  </>;\n}\n\nconst createHoverCallback = (setHighlights: (h: Highlight[]) => void, otherHighlights: Highlight[]) => (active: boolean, p: { start: number, end: number }) => {\n  setHighlights(active ? [...otherHighlights, { start: p.start, end: p.end, className: 'highlight-white' }] : otherHighlights);\n}\n\nexport default ResultView;","import React, { useMemo, useState } from 'react';\nimport './Main.css';\nimport ResultView, { Highlight } from './ResultView';\nimport { typeUtils } from 'language';\nimport a, { b } from './analytics';\n\nconst body = document.getElementById('body') || { style: { overflow: '' } };\n\nfunction Main() {\n  const [code, setCode] = useState<string>('map not []');\n  const [algorithm, setAlgorithm] = useState<'w' | 'w\\'' | 'm'>('w');\n  const [highlights, setHighlights] = useState<Highlight[]>([]);\n  const [showingHelp, setShowingHelp] = useState<boolean>(false);\n  const showHelp = () => { setShowingHelp(true); a({ name: 'help', value: 'show' }); }\n  const hideHelp = () => { setShowingHelp(false); a({ name: 'help', value: 'hide' });  }\n\n  body.style.overflow = showingHelp ? 'hidden' : '';\n\n  const resultview = useMemo(() => code && <ResultView code={code} algorithm={algorithm} setHighlights={setHighlights} />, [code, algorithm]);\n\n  return (\n    <div id=\"main\">\n      {showingHelp && <div className=\"modal\" onClick={(e) => { if ((e.target as any).className === 'modal') hideHelp() }}>\n        <div className=\"modal-content\">\n          <button className=\"sans-serif\" onClick={() => hideHelp()}>Close</button>\n          <h2>Language reference</h2>\n          <p>The language is similar in syntax to Haskell. All functions are applied in prefix notation, i.e. <code>+ 3 4</code> instead of <code>3 + 4</code>. Anonymous functions only take one parameter, i.e. <code>\\x -{'>'} \\y -{'>'} y x</code> instead of <code>\\x y -{'>'} y x</code>.</p>\n          <p>The type constructors available are:</p>\n          <ul>\n            <li><code>Int</code></li>\n            <li><code>Char</code></li>\n            <li><code>Bool</code></li>\n            <li><code>-{'>'}</code> for functions</li>\n            <li><code>[]</code> for lists</li>\n            <li><code>,</code>, <code>,,</code>, <code>,,,</code> etc. for tuples</li>\n            <li><code>Maybe</code></li>\n            <li><code>Either</code></li>\n          </ul>\n          <p>The available set of built-in functions and their types are:</p>\n          <ul>\n            {Object.entries(typeUtils.standardCtx).filter(([name]) => name[0] !== ',').map(([name, type]) => <li key={name}><code>{name} :: {type?.toString()}</code></li>)}\n          </ul>\n        </div>\n      </div>}\n\n      <h1>interactive type inference</h1>\n      <h2>\n        Play with algorithm W in your browser.\n      </h2>\n      <p>Type inference is the ability to determine an expression's type in a language. Hindley-Milner (HM) is a typed λ-calculus which allows for complete type inference without explicit type annotations. Haskell's type system is based on HM.</p>\n      <p>This tool allows you to enter expressions in syntax similar to Haskell and view how a type inference algorithm (algorithm W) could work out the types. A full list of built-in functions and their types is available <button className=\"sans-serif\" onClick={() => showHelp()} data-testid=\"help-open-button\">here</button>. Expressions must be given in prefix notation, i.e. <SetButton type='button' value='+ 3 4' current={code} setter={setCode} /> instead of <SetButton type='code' value='3 + 4' current={code} setter={setCode} />.</p>\n      <p>Usage data such as button clicks and evaluated expressions may be collected to evaluate and improve the tool.</p>\n      <h2>Algorithm:\n        <SetButton type='algorithm' value='w' current={algorithm} setter={setAlgorithm} />\n        <SetButton type='algorithm' value={'w\\''} current={algorithm} setter={setAlgorithm} />\n        <SetButton type='algorithm' value='m' current={algorithm} setter={setAlgorithm} />\n      </h2>\n      <h2>Samples:\n        <SetButton type='code' value='4' current={code} setter={setCode} />\n        <SetButton type='code' value='not' current={code} setter={setCode} />\n        <SetButton type='code' value='odd 5' current={code} setter={setCode} />\n        <SetButton type='code' value='map not []' current={code} setter={setCode} />\n        <SetButton type='code' value='fst' current={code} setter={setCode} /><br className=\"md-only\" />\n        <SetButton type='code' value='Just' current={code} setter={setCode} />\n        <SetButton type='code' value='let x = 3 in (+, x)' current={code} setter={setCode} />\n        <SetButton type='code' value='\\x -> / x 2' current={code} setter={setCode} />\n        <SetButton type='code' value=': 23 [1]' current={code} setter={setCode} />\n      </h2>\n      <div className='code-container'>\n        <input placeholder=\"Enter code...\" value={code} onChange={e => { setCode(e.target.value); b({ name: 'codeChange', value: e.target.value }); }} />\n        {code && highlights.map((h, i) => <p key={i}>{code.slice(0, h.start)}<span className={h.className}>{code.slice(h.start, h.end)}</span>{code.slice(h.end)}</p>)}\n      </div>\n      {resultview}\n    </div>\n  );\n}\n\nfunction SetButton<T extends string>({ type, value, setter, current }: { type: string, value: T, setter: (v: T) => void, current?: T }) {\n  return <button className={current === value ? 'active' : undefined} onClick={() => { setter(value); a({ name: type + 'ButtonSet', value }); }}>{value}</button>\n}\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport a from './analytics';\nimport Main from './Main';\n\na({ name: 'load' });\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}